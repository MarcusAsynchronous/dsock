<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" docName="sock-api-revamp-01">

  <front>

    <title abbrev="BSD Socket API Revamp">
    BSD Socket API Revamp
    </title>

    <author fullname="Martin Sustrik" initials="M." surname="Sustrik" role="editor">
      <address>
        <email>sustrik@250bpm.com</email>
      </address>
    </author>

    <date month="October" year="2016" />

    <area>Applications</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>BSD sockets</keyword>
    <keyword>API</keyword>

    <abstract>
      <t>This memo describes new API for network sockets. Compared to classic
         BSD socket API the new API is much more leightweight and flexible.
         Its primary focus is on easy composability of network protocols.</t>
    </abstract>

  </front>

  <middle>

    <section title = "Introduction">
      <t>The progress in the area of network protocols is distinctively
         lagging behind. While every hobbyist new to the art of programming
         writes and publishes their small JavaScript libraries, there's no
         such thing going on with network protocols. Indeed, it looks like
         the field of network protocols is dominated by big companies and
         academia, just like programming as a whole used to be before the advent
         of personal computers.</t>
      <t>While social and political reasons may be partly to blame (adoption,
         interoperability etc.) the technology itself creates a huge barrier
         to popular participation. For example, the fact that huge part of the
         networking stack typically lives in the kernel space will prevent most
         people from even trying. More importantly though there's basically
         no way to reuse what already exists. While in JavaScript world you can
         get other people's libraries, quickly glue them together, add a bit of
         code of your own and publish a shiny new library, you can't do the same
         thing with network protocols. You can't take framing from WebSockets,
         add multihoming from SCTP, keep-alives from TCP and congestion control
         from DCCP. You have to write most of the code yourself which requires
         a lot of time, often more than a single hobbyist programmer can
         realistically afford.</t>
      <t>This memo proposes to fix the reusability problem by revamping the
         old BSD socket API and while doing so focusing on composability rather
         than on completeness.</t>
      <t>In short, the API proposed in this document doesn't try to virtualize
         all possible aspects of all possible protocols and provide a single set
         of functions to deal with all of them. Instead, it acknowledges how
         varied the protocol landscape is and how much the requirements for
         individual protocols differ. Therefore, it lets each protocol define
         its own API and asks only for bare minimum of standardised behaviour
         needed to implement protocol composability.</t>
      <t>As a consequence, the new API is much more leightweight and flexible
         than BSD socket API and allows to decompose today's monolithic protocol
         monsters into small single-purpose microprotocols that can be easily
         combined together to achieve desired functionality. </t>
      <t>The document also provides some non-binding suggestions for protocol
         API designers. Following these suggestions would lead to uniform feel
         of the APIs and flat learning curve for protocol users.</t>
    </section>

    <section title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
         "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
         document are to be interpreted as described in RFC 2119.</t>
    </section>

    <section title="Composability">
      <t>To cover all the use cases the API has to support two distinct kinds
         of composabilty.</t>

      <section title="Vertical composability">
        <t>Vertical composability is an ability to stack protocols one on the
           top of another. From the network point of view the protocol on the
           top is a payload of the protocol on the bottom. From the API point of
           view the top protocol encapsulates the bottom protocol, very much
           like a function encapsulates another function that it calls.</t>
        <t>Example of vertical stack of protocols:</t>
        <figure>
          <artwork>
                            +----------+
                            |   HTTP   | 
                            +----------+
                            |    TCP   |
                            +----------+
                            |    IP    |
                            +----------+
                            | Ethernet |
                            +----------+
          </artwork>
        </figure>
      </section>

      <section title="Horizontal composability">
        <t>Horizontal composability is an ability to execute protocols in
           sequential manner. From the network point of view one type of
           communication ends and is replaced by another type of communication.
           From API point of view one protocol is terminated and another one
           is started, reusing the same underlying protocol, very much like
           a function can call two nested functions in sequence without
           having to exit itself.</t>
        <t>An example of horizontal composability is how WebSockets protocol
           starts with the classic text-based HTTP protocol and then, at some
           point, switches to a completely different binary protocol:</t>
        <figure>
          <artwork>
               +-----------------------------------+
               |   HTTP   |       WebSockets       |
               +----------+------------------------+
               |                TCP                |
               +-----------------------------------+
          </artwork>
        </figure>
        <t>Another example is how STARTTLS switches non-encrypted protocol into
           encrypted version of the same protocol.</t>
        <t>While these are very visible cases of composing protocols
           horizontally, the technique is in fact ubiquitous. For example,
           most protocols are composed from three distinct mini-protocols:
           protocol header (initial handshake), protocol body (sending data
           back and forth) and protocol footer (terminal handshake):</t>
        <figure>
          <artwork>
               +-----------------------------------+
               | Header |       Body      | Footer |
               +--------+-----------------+--------+
               |                TCP                |
               +-----------------------------------+
          </artwork>
        </figure>
      </section>

    </section>

    <section title="Scheduling or rather lack of it">
      <t>During the decades since BSD sockets were fisrt introduced the way they
         are used have changed significantly. While in the beginning the user
         was supposed to fork a new process for each connection and do all the
         work using simple blocking calls nowadays the user is expected to keep
         a pool of connections, check them via functions like poll() or kqueue()
         and dispatch any work to be done to one of the worker threads in
         a thread pool. In short, user is supposed to do both network and CPU
         scheduling.</t>
      <t>This change happened for performance reasons and haven't improved
         functionality or usability of BSD socket API in any way. On the
         contrary, by requiring every programmer, however junior or uninterested
         in system design topics, to do system programmer's work it contributed
         to proliferation of buggy, hard-to-debug and barely maintainable
         code.</t>
      <t>To address this problem, this memo assumes that there already exists
         an efficient concurrency implementation where forking a new lightweight
         process takes at most hundreds of nanoseconds and context switch
         takes tens of nanoseconds. Note that there are already such concurrency
         systems deployed in the wild. One well-known example are Golang's
         goroutines but there are others available as well.</t>
      <t>In such environment network programming can be done in the old
         "one process per connection" way. There's no need for polling, thread
         pools, callbacks, explicit state machines and so on.</t>
      <t>This memo thus adheres to "let system programmers do system
         programming" motto and doesn't address the problem of scheduling,
         be it CPU scheduling or network scheduling, at all.</t>
      <t>As a footnote, it should be metioned that this proposal makes couple of
         deliberate design choices that prevent the modern "schedule by hand"
         style of network programming.</t>
    </section>

    <section title="File descriptors">
      <t>One of the design goals of this API is to support both kernel space
         and user space implementations. One problem with that is that
         kernel space objects are typically reffered to by file descriptors
         while, at the same time, there's no easy way to associate user space
         objects with file descriptors.</t>
      <t>Therefore this specification allows user space implementations
         to use fake file descriptors (simple integers that kernel space
         knows nothing about) and does not guarantee that system functions
         will work with those descriptors. For example, you cannot count
         on POSIX close() function to be able to close a socket.</t>
    </section>

    <section title="Socket options">
      <t>There's no equivalent to socket options as they are known from BSD
         socket API. Any such functionality is supposed to be built by vertical
         layering of protocols.</t>
    </section>

    <section title="Deadlines">
        <t>Unlike with BSD sockets the deadlines are points in time rather than
           intervals. This allows to use the same deadline in multiple calls
           without need for recomputing the remaining interval:</t>
        <figure>
          <artwork>
    int64_t deadline = now() + 1000;
    bsend(h, "ABC", 3, deadline);
    bsend(h, "DEF", 3, deadline);
          </artwork>
        </figure>
    </section>

    <section title="Function prototypes">
      <t>For consistency's sake the function names SHOULD be in lowercase and
         SHOULD be composed of short protocol name and action name separated
         by underscore (e.g. "tcp_connect"). Of course, in non-C languages
         the native naming convention should be followed, but still, the name
         SHOULD contain both protocol name and action name.</t>
      <t>First argument of the function, where applicable, SHOULD be the file
         descriptor.</t>
      <t>In all potentially blocking functions the last argument should be
         deadline.</t>
    </section>

    <section title="Protocol initialization">
      <t>A protocol SHOULD be initialized using "start" function
         (e.g. "smtp_start"). If protocol runs on top of another protocol the
         file descriptor of the underlying protocol SHOULD be supplied as the
         first argument of the function. The function may have arbitrary number
         of additional arguments.</t>
      <t>The function SHOULD return the file descriptor of the newly created
         protocol instance. In case of error it SHOULD return -1 and set errno
         to the appropriate error.</t>
      <t>Some protocols require more complex setup. Consider TCP's
         listen/connect/accept connection setup process. These protocols should
         use custom set of functions rather than try to shoehorn all the
         functionality into an all-purpose "start" function.</t>
      <t>If protocol runs on top of an underlying protocol it takes of ownership
         of that protocol. Using the low level protocol while it is owned by a
         higher level protocol will result in undefined behaviour.</t>
      <t>Example of creating a stack of four protocols:</t>
      <figure>
        <artwork>
    int h1 = tcp_connect("192.168.0.111:5555");
    int h2 = foo_start(h1, arg1, arg2, arg3);
    int h3 = bar_start(h2);
    int h4 = baz_start(h3, arg4, arg5);
        </artwork>
      </figure>
    </section>

    <section title="Protocol termination">
      <t>Protocol descriptor is closed by hclose() function. The protocol SHOULD
         shut down immediately without even trying to do termination handshake
         or similar. Note that this is different from how BSD sockets behave.
         </t>
      <t>The protocol MUST also clean up all resources it owns including
         closing the underlying protocol. Given that the underlying protocol
         does the same operation, an entire stack of protocols can be shut down
         recursivelly by closing the file descriptor of the topmost
         protocol:</t>
      <figure>
        <artwork>
    int h1 = foo_start();
    int h2 = bar_start(h1);
    int h3 = baz_start(h2);
    hclose(h3); /* baz, bar and foo are shut down */
        </artwork>
      </figure>
      <t>To perform clean shut down there SHOULD be a protocol-specific
         function called "stop". In addition to the file descriptor to close
         the function can have arbitrary number of other arguments.</t>
      <t>If the shut down functionality is potentially blocking (e.g. if it
         requires a response from the peer) the last argument SHOULD be a
         deadline.</t>
      <t>If shut down function succeeds it SHOULD NOT close the underlying
         protocol. Instead it should return its file descriptor. This is crucial
         for horizontal composability of protocols:</t>
      <figure>
        <artwork>
    /* create stack of two protocols */
    h1 = foo_start();
    h2 = bar_start(h1);
    /* top protocol is closed but bottom one is still alive */
    h1 = bar_stop(h2);
    /* new top protocol is started */
    h3 = baz_start(h1);
    /* shut down both protocols */
    h1 = baz_stop(h3);
    foo_stop(h1);
        </artwork>
      </figure>
      <t>Some protocols are not capable of doing this. For example, they may not
         have a termination sequence defined. In such cases the shut down
         function SHOULD simply close the underlying protocol and return 0.</t>
      <t>Also, if the protocol has no underlying protocol the function SHOULD
         return zero on success.</t>
      <t>In case of error shut down function SHOULD close the underying protocol
         (and thus recursively all protocols beneath it), return -1 and set
         errno to appropriate value.</t>
      <t>Note that this design does away with BSD socket linger behaviour which
         cannot be cleanly implemented in user space.</t>
    </section>

    <section title="Normal operation">
      <t>Everything that happens between protocol initialization and protocol
         termination will be referred to as "normal operation".</t>

      <section title = "Application protocols">
         <t>Application protocols live on top of transport protocols. Rather
            than passing raw data they are meant to perform a specific service
            for the user (e.g. DNS performs name lookups).</t>
         <t>Application protocols don't send or receive data. Therefore,
            they have no standardized API for normal operation. Still they
            can be initialized and terminated same way as other protocols.</t>
         <t>From the point of view of this document, application protocol is
            always at the topmost level of the protocol stack.</t>
      </section>

      <section title = "Presentation protocols">
         <t>Presentation protocols add structure to data carried by transport
            protocols (e.g. ASN.1, JSON, XML). This proposal doesn't address
            them in any way. Either the protocol sends/receives binary data
            that just happen to be in s structured format in which case its
            a standard transport protocol. Or the protocol exposes special API
            to browse the structured data in which case it is an application
            protocol.</t>
      </section>

      <section title = "Transport protocols">
         <t>The term "transport protocol" in this memo has broader scope than
            "OSI L4 protocol". By "reansport protocol" we mean anything capable
            of sending and/or receiving unstructured data, be it TCP, IP or
            Ethernet.</t>

        <section title="Bytestream protocols">
          <t>Byte stream protocols are transport protocols that define no
             message boundaries. One peer can send 10 bytes, then 8 bytes. The
             other peer can read all 18 bytes at once or read first 12 bytes,
             then 6 bytes. Bytestream protocols are always reliable (no bytes
             can be lost) and ordered (bytes are received in the same order they
             were sent in). TCP is a classic example of bytestream protocol.</t>
          <t>Bytestream protocols can be used via following four functions:</t>
          <figure>
            <artwork>
    int bsend(int h, const void *buf, size_t len,
        int64_t deadline);
    int brecv(int h, void *buf, size_t len,
        int64_t deadline);
    int bsendv(int h, const struct iovec *iov, size_t iovlen,
        int64_t deadline);
    int brecvv(int h, const struct iovec *iov, size_t iovlen,
        int64_t deadline);
            </artwork>
          </figure>
          <t>Function bsend() sends data to the protocol. The protocol SHOULD
             send them, after whatever manipulation is required, to its
             underlying protocol. Eventually, the lowermost protocol in the
             stack sends the data to the network.</t>
          <t>Function brecv() reads data from the protocol. The protocol SHOULD
             read them from the underlying socket and after whetever
             manipulation is needed return them to the caller. The lowermost
             protocol in the stack reads the data from the network.</t>
          <t>Both functions MUST be blocking and exhibit atomic behaviour. I.e.
             either all data are sent/received or none of them are. In the later
             case protocol MUST be marked as broken, errno MUST be set to
             appropriate value and -1 MUST be returned to the user. Any
             subsequent attempt to use the protocol MUST result in an error.</t>
          <t>Expired deadline is considered to be an error and the protocol
             MUST behave as described above setting errno to ETIMEDOUT.</t>
          <t>In case of success both functions MUST return zero.</t>
          <t>Note that the implementation of brecv() may change the content
             of the buffer even in case of error. However, what will be written
             into the buffer is unpredictable and using such data will result
             in undefined behaviour.</t>
          <t>Functions bsendv() and brecvv() MUST behave in the same way
             as bsend() and brecv(), the only difference being that buffers are
             passed to the functions via scatter/gather arrays, same way as in
             POSIX sendmsg() and recvmsg() functions.</t>
        </section>

        <section title="Message protocols">
          <t>Message protocols are transport protocols that preserve message
             boundaries. While message protocols are not necessarily reliable
             (messages can be lost) or ordered (messages can be received in
             different order than they were sent in) they are always atomic.
             User will receive either complete message or no message. IP, UDP
             and WebSockets are examples of message protocols.</t>
          <t>Message protocols can be used via following four functions:</t>
          <figure>
            <artwork>
    int msend(int s, const void *buf, size_t len,
        int64_t deadline);
    ssize_t mrecv(int h, void *buf, size_t len,
        int64_t deadline);
    int msendv(int s, const struct iovec *iov, size_t iovlen,
        int64_t deadline);
    ssize_t mrecvv(int s, const struct iovec *iov, size_t iovlen,
        int64_t deadline);
            </artwork>
          </figure>
          <t>Function msend() sends message to the protocol. The protocol SHOULD
             send it, after whatever manipulation is required, to its
             underlying protocol. Eventually, the lowermost protocol in the
             stack sends the data to the network.</t>
          <t>Function mrecv() reads message from the protocol. The protocol
             SHOULD read it from its underlying protocol and after whetever
             manipulation is needed return it to the caller. The lowermost
             protocol in the stack reads the data from the network.</t>
          <t>Both functions MUST be blocking and exhibit atomic behaviour. I.e.
             either entire message is sent/received or none of it is. In the
             later case errno MUST be set to appropriate value and -1 MUST be
             returned to the user. The protocol MAY be marked as broken and
             any subsequent attempt to use it will result in an error.</t>
          <t>Note that unlike with bytestream sockets the buffer supplied to
             mrecv() doesn't have to be fully filled in, i.e. received messaged
             may be smaller than the buffer. If the message is larger than
             the buffer, it is considered to be an error and the protocol
             must behave as described above, setting errno to EMSGSIZE.</t>
          <t>Expired deadline is considered to be an error and the protocol
             MUST behave as described above, setting errno to ETIMEDOUT.</t>
          <t>In case of success msend() function MUST return zero, mrecv()
             MUST return the size of the received message (zero is a valid
             size).</t>
          <t>The implementation of mrecv() may change the content of the buffer
             even in case of error. However, what will be written into the
             buffer is unpredictable and using such data will result
             in undefined behaviour.</t>
          <t>Functions msendv() and mrecvv() MUST behave in the same way
             as msend() and mrecv(). The only difference is that buffers are
             passed to the functions via scatter/gather arrays, same way as in
             POSIX sendmsg() and recvmsg() functions.</t>
        </section>

        <section title="Custom sending and receiving">
          <t>In addition to send/recv functions described above,  protocols
             MAY implement its own custom send/recv functions. These
             functions should be called "send" and/or "recv" (e.g.
             "udp_send").</t>
          <t>Custom functions allow for providing additional arguments. For
             example, UDP protocol may implement custom send function with
             additional "destination IP address" argument.</t>
          <t>A protocol MAY also implement multiple send or receive functions
             as needed.</t>
          <t>Protocol implementors should try to make custom send/recv
             functions as consistent with msend/mrecv as possible.</t>
        </section>

      </section>

    </section>

    <section title="Examples">
      <t>To give an example of microprotocols that can be implemented using
         proposed API, here's the list of what's implemented in the
         proof-of-concept project:
        <list style="sybmols">
          <t>compressor: compresses messages</t>
          <t>crlf: takes a bytestream protocol and turns it into message
             protocol by delimiting message by CRLF sequences</t>
          <t>encryptor: encrypts and authenticates messages</t>
          <t>keepalive: sends a keepalive message once in a while, on receiving
             side it check whether keepalives are arriving</t>
          <t>log: logs all data to the console (used for debugging)</t>
          <t>nagle: batches outgoing data to improve performance</t>
          <t>pfx: turns a bytestream protocol into message-based protocol by
             prefixing each message by its size</t>
          <t>tcp: wraps system implementation of TCP protocol</t>
          <t>throttler: imposes a limit of amount of data that can be sent
             and/or recevied per second</t>
          <t>udp: wraps system implementation of UDP protocol</t>
          <t>unix: wraps system implementation of UNIX domain sockets</t>
        </list>
      </t>
      <t>And here's an example of how the microprotocols can be combined to
         achieve complex functionality:</t>
      <figure>
        <artwork>
    /* Create a TCP connection. */
    h1 = tcp_connect(addr, -1);
    /* Limits outgoing traffic to 1MB/sec. Check every 1000ms. */
    h2 = throttler_start(h1, 1024 * 1024, 1000, 0, 0);
    /* Batch up to 2000 bytes of outgoing traffic. */
    h3 = nagle_start(h2, 2000, 100);
    /* Convert bytes into messages. */
    h4 = pfx_start(h3);
    /* Send keepalives message every 1000ms. */
    h5 = keepalive_start(h4, 1000, 4000, "KEEPALIVE", 9);
    /* Encrypt and authenticate messages. */
    h6 = encrypt_start(h5, key, sizeof(key), -1);
    /* Compress the messages. */
    h7 = compress_start(h6);
        </artwork>
      </figure>
      <t>Let's have a look at what happens to a message sent by the end user.
         It traverses the stack from level 7 to level 1. First it gets
         compressed, then it gets encrypted. Keepalive protocol doesn't modify
         the message but may interject keepalive messages. Then the message is
         transformed to a stream of bytes. In this case it's the size
         of the message in network byte order followed by the body
         of the message. Nagle protocol doesn't modify the data but it may
         delay it by at most 100ms and batch it with preceding and/or
         following data. Throttler once again doesn't modify the data but may
         delay so as not to violate the bandwidth limit. Finally, the data is
         sent to the network via TCP protocol.</t>
      <t>In the opposite direction, message traverses the stack from level 1 to
         level 7. Bytes are read from TCP protocol. Throttler doesn't have
         limit set for incoming data and thus the data are just silently
         passed through it. Nagle doesn't do anything with incoming data.
         Then, the bytes are parsed and converted into a message. Keepalive
         layer doesn't do anything with the message itself, but it checks
         whether there have been any messages in last 4 seconds and if not so
         it raises an error. Finally, message is decrypted and authenticated at
         level 6 and decompressed at level 7.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The security implications of the new API don't differ from security
         implications of classic BSD socket API. Still, it may be worth
         passing the design through a security audit.</t>
    </section>

  </middle>

</rfc>
