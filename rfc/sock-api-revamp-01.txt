



Internet Engineering Task Force                          M. Sustrik, Ed.
Internet-Draft                                           October 1, 2016
Intended status: Informational
Expires: April 4, 2017


                         BSD Socket API Revamp
                           sock-api-revamp-01

Abstract

   This memo describes new API for network sockets.  Compared to classic
   BSD socket API the new API is much more leightweight and flexible.
   Its primary focus is on easy composability of network protocols.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 4, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Sustrik                   Expires April 4, 2017                 [Page 1]

Internet-Draft            BSD Socket API Revamp             October 2016


1.  Introduction

   The progress in the area of network protocols is distinctively
   lagging behind.  While every hobbyist new to the art of programming
   writes and publishes their small JavaScript libraries, there's no
   such thing going on with network protocols.  Indeed, it looks like
   the field of network protocols is dominated by big companies and
   academia, just like programming as a whole used to be before the
   advent of personal computers.

   While social and political reasons may be partly to blame (adoption,
   interoperability etc.) the technology itself creates a huge barrier
   to popular participation.  For example, the fact that huge part of
   the networking stack typically lives in the kernel space will prevent
   most people from even trying.  More importantly though there's
   basically no reusability.  While in JavaScript you can get other
   people's libraries, quickly glue them together, add a bit code of
   your own and publish a shiny new library, you can't do the same thing
   with network protocols.  You can't take framing from WebSockets, add
   multihoming from SCTP, keep-alives from TCP and congestion control
   from DCCP and have a new working network protocol.  You have to write
   most of the code yourself which requires a lot of time, often more
   than a single hobbyist programmer can realistically afford.

   This memo proposes to fix the reusability problem by revamping the
   old BSD socket API and while doing so focusing on composability
   rather than on completeness.

   In short, the API proposed in this document doesn't try to virtualize
   all possible aspects of all possible protocols and provide a single
   set of functions to deal with all of them.  Instead, it acknowledges
   how varied the protocol landscape is and how much the requirements
   for individual protocols differ.  Therefore, it lets each protocol
   define its own API and asks only for bare minimum of standardised
   behaviour needed to implement protocol composability.

   As a consequence, the new API is much more leightweight and flexible
   than BSD socket API and allows to decompose the monolithic protocol
   monsters of today into small single-purpose microprotocols that can
   be easily combined together to achieve desired functionality.

   The document also provides some non-binding suggestions for protocol
   API designers.  Following these suggestions would lead to uniform
   feel of the APIs and flat learning curve for protocol users.







Sustrik                   Expires April 4, 2017                 [Page 2]

Internet-Draft            BSD Socket API Revamp             October 2016


2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119.

3.  Composability

   To cover all the use cases the API has to support two distinct kinds
   of composabilty.

3.1.  Vertical composability

   Vertical composability is an ability to stack protocols one on the
   top of another.  From the network point of view the protocol on the
   top is a payload of the protocol on the bottom.  From the API point
   of view the top protocol encapsulates the bottom protocol, very much
   like calling function encapsulates the function being called.

   Example of vertical stack of protocols:

                               +----------+
                               |   HTTP   |
                               +----------+
                               |    TCP   |
                               +----------+
                               |    IP    |
                               +----------+
                               | Ethernet |
                               +----------+

3.2.  Horizontal composability

   Horizontal composability is an ability to execute protocols in
   sequential manner.  From the network point of view one type of
   communication ends and is replaced by another type of communication.
   From API point of view one protocol is terminated and another one is
   started, reusing the same underlying protocol.

   An example of horizontal composability is how WebSockets protocol
   starts with the classic text-based HTTP protocol and then, at some
   point, switches to a completely different binary protocol:

                  +-----------------------------------+
                  |   HTTP   |       WebSockets       |
                  +----------+------------------------+
                  |                TCP                |
                  +-----------------------------------+



Sustrik                   Expires April 4, 2017                 [Page 3]

Internet-Draft            BSD Socket API Revamp             October 2016


   Another example is how STARTTLS switches non-encrypted protocol into
   encrypted version of the same protocol.

   While these are very visible cases of composing protocols
   horizontally, the technique is in fact ubiquitous.  For example, most
   protocols are composed from three distinct mini-protocols: protocol
   header (initial handshake), protocol body (sending data back and
   forth) and protocol footer (terminal handshake):

                  +-----------------------------------+
                  | Header |       Body      | Footer |
                  +--------+-----------------+--------+
                  |                TCP                |
                  +-----------------------------------+

4.  Scheduling or rather lack of it

   During the decades since BSD sockets were fisrt introduced the way
   they are used have changed significantly.  While in the beginning the
   user was supposed to fork a new process for each connection and do
   all the work using simple blocking calls nowadays the user is
   supposed to keep a pool of connections check them via functions like
   poll() or kqueue() and dispatch any work to be done to one of the
   worker threads in a thread pool.  In short, user is supposed to do
   both network and CPU scheduling.

   This change happened for performance reasons and haven't improved
   functionality or usability of BSD socket API in any way.  On the
   contrary, by requiring every programmer, however junior or
   uninterested in system design topics, to do system programmer's work
   it contributed to proliferation of buggy, hard-to-debug and barely
   maintainable code.

   To address this problem, this memo assumes that there already exists
   an efficient concurrency implementation where forking a new
   lightweight process takes at most hundreds of nanoseconds and context
   switch takes tens of nanoseconds.  Note that there are already such
   concurrency systems deployed in the wild.  One well-known example are
   Golang's goroutines but there are others available as well.

   In such environment network programming can be done in the old "one
   process per connection" way.  There's no need for polling, thread
   pools, callbacks, explicit state machines and so on.

   This memo thus adheres to "let system programmers do system
   programming" motto and doesn't address the problem of scheduling, be
   it CPU scheduling or network scheduling, at all.




Sustrik                   Expires April 4, 2017                 [Page 4]

Internet-Draft            BSD Socket API Revamp             October 2016


   As a footnote, it should be metioned that this proposal makes couple
   of deliberate design choices that prevent the modern "schedule by
   hand" style of network programming.

5.  Socket options

   There's no equivalent to socket options as the are known from BSD
   socket API.  Any such functionality is supposed to be built by
   vertical layering of protocols.

6.  Function names

   For consistency's sake the function names SHOULD be in lowercase and
   SHOULD be composed of short protocol name and action name separated
   by underscore (e.g. "tcp_connect").

   This proposal is focused on C language.  In languages that use
   different naming conventions the native convention SHOULD be used
   (e.g.  "TcpConnect" or "Tcp.Connect").

7.  Handles

   First argument of every function SHOULD be the handle, unless the
   function has not handle argument at all.

   With BSD socket APIs protocol instances are referred to by file
   descriptors.  This proposal doesn't change that in any way, however,
   it acknowledges the fact that for multiple reasons (performance, ease
   of development) there's a need for network protocol implementations
   in the user space.

   Given that POSIX provides no way to create custom file descriptor
   types in user space, protocol implementors are forced to use fake
   file descriptors that don't work with standard POSIX functionslike
   close() or fcntl().

   To address the problem this proposal is agnostic about whether
   protocols are implemented in kernel space and referred to by file
   descriptors or whether they are implemented in user space and
   referred to by fake file descriptors.  It uses term "handle" to refer
   to both kinds of descriptors.

8.  Deadlines

   All blocking functions conformant with this specification SHOULD have
   an explicit deadline parameter.  Unlike with BSD sockets though the
   deadline is a point in time rather than interval.  This allows to use




Sustrik                   Expires April 4, 2017                 [Page 5]

Internet-Draft            BSD Socket API Revamp             October 2016


   the same deadline in multiple calls without need for recomputing the
   remaining interval:

       int64_t deadline = now() + 1000;
       bsend(h, "ABC", 3, deadline);
       bsend(h, "DEF", 3, deadline);

   The deadline argument SHOULD be the last argument in the function.

9.  Protocol initialization

   A protocol SHOULD be initialized using "start" function (e.g.
   "smtp_start").  If protocol runs on top of another protocol the
   handle of the underlying protocol SHOULD be supplied as the first
   argument of the function.  The function may have arbitrary number of
   additional arguments.

   The function SHOULD return the handle of the newly created protocol
   instance.  In case of error it SHOULD return -1 and set errno to the
   appropriate error.

   Some protocols require more complex setup.  Consider TCP's
   listen/connect/accept connection setup process.  These protocols
   should use custom set of functions rather than try to shoehorn all
   the functionality into an all-purpose "start" function.

   If protocol runs on top of an underlying protocol it takes of
   ownership of that protocol's handle.  Using the handle of low level
   protocol while it is owned by a higher level protocol will result in
   undefined behaviour.

   Example of creating a stack of four protocols:

       int h1 = tcp_connect("192.168.0.111:5555");
       int h2 = foo_start(h1, arg1, arg2, arg3);
       int h3 = bar_start(h2);
       int h4 = baz_start(h3, arg4, arg5);

10.  Protocol termination

   When handle is closed (i.e. close() function in POSIX, an equivalent
   in user space protocol implementation) the protocol SHOULD shut down
   immediately without even trying to do termination handshake or
   similar.  Note that this is different from how BSD sockets behave.

   The protocol MUST also clean up all resources it owns including
   closing the handle of the underlying protocol.  Given that the
   underlying protocol does the same operation, an entire stack of



Sustrik                   Expires April 4, 2017                 [Page 6]

Internet-Draft            BSD Socket API Revamp             October 2016


   protocols can be shut down by closing the handle of the topmost
   protocol:

       int h1 = foo_start();
       int h2 = bar_start(h1);
       int h3 = baz_start(h2);
       hclose(h3); /* baz, bar and foo are shut down */

   To perform clean shut down there SHOULD be a protocol-specific
   function called "stop".  In addition to the handle to close the
   function can have arbitrary numer of other arguments.

   If the shut down functionality is potentially blocking (e.g. if it
   requires a response from the peer) the last argument SHOULD be a
   deadline.

   If shut down function succeeds it SHOULD NOT close the underlying
   protocol.  Instead it should return its handle.  This is crucial for
   horizontal composability of protocols:

       /* create stack of two protocols */
       h1 = foo_start();
       h2 = bar_start(h1);
       /* top protocol is closed but bottom one is still alive */
       h1 = bar_stop(h2);
       /* new top protocol is started */
       h3 = baz_start(h1);
       /* shut down both protocols */
       h1 = baz_stop(h3);
       foo_stop(h1);

   Some protocols are not capable of doing this.  For example, they may
   not have a termination sequence defined.  In such cases the shut down
   function SHOULD simply close the underlying protocol and return 0.

   Also, if the protocol has no underlying protocol the function SHOULD
   return zero on success.

   In case of error shut down function SHOULD close the underying
   protocol (and thus recursively all protocols beneath it), return -1
   and set errno to appropriate value.

11.  Normal operation

   Everything that happens between protocol initialization and protocol
   termination will be referred to as "normal operation".





Sustrik                   Expires April 4, 2017                 [Page 7]

Internet-Draft            BSD Socket API Revamp             October 2016


11.1.  Application protocols

   Application protocols live on top of transport protocols.  Rather
   than passing raw data they are meant to perform a specific service
   for the user (e.g.  DNS performs name lookups).

   Application protocols don't send or receive data.  Therefore, they
   have no standardized API for normal operation.  Still they can be
   initialized and terminated same way as other protocols.

   From the point of view of this document, application protocol is
   always at the topmost level of the protocol stack.

11.2.  Presentation protocols

   Presentation protocols add structure to data carried by transport
   protocols (e.g.  ASN.1, JSON, XML).  This proposal doesn't address
   them in any way.  Either the protocol sends/receives binary data that
   just happen to be in s structured format in which case its a standard
   transport protocol.  Or the protocol exposes special API to browse
   the structured data in which case it is an application protocol.

11.3.  Transport protocols

   The term "transport protocol" in this memo has broader scope than
   "OSI L4 protocol".  By "reansport protocol" we mean anything capable
   of sending and/or receiving unstructured data, be it TCP, IP or
   Ethernet.

11.3.1.  Bytestream protocols

   Byte stream protocols are transport protocols that define no message
   boundaries.  One peer can send 10 bytes, then 8 bytes.  The other
   peer can read all 18 bytes at once or read first 12 bytes, then 6
   bytes.  Bytestream protocols are always reliable (no bytes can be
   lost) and ordered (bytes are received in the same order they were
   sent in).  TCP is a classic example of bytestream protocol.

   Bytestream protocols can be used via following two functions:

       int bsend(int h, const void *buf, size_t len, int64_t deadline);
       int brecv(int h, void *buf, size_t len, int64_t deadline);

   Function bsend() sends data to the protocol.  The protocol SHOULD
   send them, after whatever manipulation is required, to its underlying
   protocol.  Eventually, the lowermost protocol in the stack sends the
   data to the network.




Sustrik                   Expires April 4, 2017                 [Page 8]

Internet-Draft            BSD Socket API Revamp             October 2016


   Function brecv() reads data from the protocol.  The protocol SHOULD
   read them from the underlying socket and after whetever manipulation
   is needed return them to the caller.  The lowermost protocol in the
   stack reads the data from the network.

   Both functions MUST be blocking and exhibit atomic behaviour.  I.e.
   either all data are sent/received or none of them are.  In the later
   case protocol MUST be marked as broken, errno MUST be set to
   appropriate value and -1 MUST be returned to the user.  Any
   subsequent attempt to use the protocol MUST result in an error.

   Expired deadline is considered to be an error and the protocol MUST
   behave as described above setting errno to ETIMEDOUT.

   In case of success both functions MUST return zero.

   Note that the implementation of brecv() may change the content of the
   buffer even in case of error.  However, what will be written into the
   buffer is unpredictable and using such data will result in undefined
   behaviour.

11.3.2.  Message protocols

   Message protocols are transport protocols that preserve message
   boundaries.  While message protocols are not necessarily reliable
   (messages can be lost) or ordered (messages can be received in
   different order than they were sent in) they are always atomic.  User
   will receive either complete message or no message.  IP, UDP and
   WebSockets are examples of message protocols.

   Message protocols can be used via following four functions:

       int msend(int s, const void *buf, size_t len, int64_t deadline);
       ssize_t mrecv(int h, void *buf, size_t len, int64_t deadline);
       int msendmsg(int s, const struct iovec *iov, size_t iovlen,
           void *ctrl, size_t ctrllen, int64_t deadline);
       int mrecvmsg(int s, struct iovec *iov, size_t iovlen,
           void *ctrl, size_t ctrllen, int64_t deadline);


   Function msend() sends message to the protocol.  The protocol SHOULD
   send it, after whatever manipulation is required, to its underlying
   protocol.  Eventually, the lowermost protocol in the stack sends the
   data to the network.

   Function mrecv() reads message from the protocol.  The protocol
   SHOULD read it from its underlying protocol and after whetever




Sustrik                   Expires April 4, 2017                 [Page 9]

Internet-Draft            BSD Socket API Revamp             October 2016


   manipulation is needed return it to the caller.  The lowermost
   protocol in the stack reads the data from the network.

   Both functions MUST be blocking and exhibit atomic behaviour.  I.e.
   either entire message is sent/received or none of it is.  In the
   later case errno MUST be set to appropriate value and -1 MUST be
   returned to the user.  The protocol MAY be marked as broken and any
   subsequent attempt to use it will result in an error.

   Note that unlike with bytestream sockets the buffer supplied to
   mrecv() doesn't have to be fully filled in, i.e. received messaged
   may be smaller than the buffer.  If the message is larger than the
   buffer, it is considered to be an error and the protocol must behave
   as described above, setting errno to EMSGSIZE.

   Expired deadline is considered to be an error and the protocol MUST
   behave as described above, setting errno to ETIMEDOUT.

   In case of success msend() function MUST return zero, mrecv() MUST
   return the size of the received message (zero is a valid size).

   The implementation of mrecv() may change the content of the buffer
   even in case of error.  However, what will be written into the buffer
   is unpredictable and using such data will result in undefined
   behaviour.

   Function msendmsg() and mrecvmsg() MUST behave in the same way as
   msend() and mrecv(), however, there are two differences.

   First, buffers are passed to the functions via scatter/gather arrays,
   same way as in POSIX sendmsg() and recvmsg() functions.

   Second, additional data may be passed to and/or out of the functions
   via control data buffer.  Control data are discussed in detail later
   on in this proposal.

11.3.2.1.  Custom sending and receiving

   In addition to send/recv functions described above, message-based
   protocols MAY implement its own custom send/recv functions.  These
   functions should be called "send" and/or "recv" (e.g.  "udp_send").

   Custom functions allow for providing additional arguments.  For
   example, UDP protocol may implement custom send function with
   additional "destination IP address" argument.

   A protocol MAY also implement multiple send or receive functions as
   needed.



Sustrik                   Expires April 4, 2017                [Page 10]

Internet-Draft            BSD Socket API Revamp             October 2016


   Protocol implementors should try to make custom send/recv functions
   as consistent with msend/mrecv as possible.

11.3.2.2.  Control (ancillary) data

12.  IANA Considerations

   This memo includes no request to IANA.

13.  Security Considerations

   The security implications of the new API don't differ from security
   implications of classic BSD socket API.  Still, it may be worth
   passing the design through a security audit.

Author's Address

   Martin Sustrik (editor)

   Email: sustrik@250bpm.com































Sustrik                   Expires April 4, 2017                [Page 11]
